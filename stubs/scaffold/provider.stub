<?php

namespace $NAMESPACE$;

use Illuminate\Support\Facades\Storage;
use Illuminate\Support\ServiceProvider;
use Plugins\$PLUGIN$\Support\StorageManager;

class $CLASS$ extends ServiceProvider
{
    /**
     * @var string $pluginName
     */
    protected string $pluginName = '$PLUGIN$';

    /**
     * @var string $pluginNameLower
     */
    protected string $pluginNameLower = '$LOWER_NAME$';

    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
	    $this->registerLink();
	    $this->registerHelper();
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            plugin_path($this->pluginName, '$PATH_CONFIG$/config.php') => config_path($this->pluginNameLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            plugin_path($this->pluginName, '$PATH_CONFIG$/config.php'), $this->pluginNameLower
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/plugins/' . $this->pluginNameLower);

        $sourcePath = plugin_path($this->pluginName, '$PATH_VIEWS$');

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $this->pluginNameLower . '-plugin-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->pluginNameLower);
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/plugins/' . $this->pluginNameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->pluginNameLower);
        } else {
            $this->loadTranslationsFrom(plugin_path($this->pluginName, '$PATH_LANG$'), $this->pluginNameLower);
        }
    }

	/**
	 * Register link.
	 *
     * @return void
	 */
	public function registerLink()
	{
		$linkPath = public_path('assets/plugin/' . $this->pluginNameLower);

		$targetPath = plugin_path($this->pluginName, '$PATH_ASSETS$');

		if (!file_exists($linkPath) || $this->isRemovableSymlink($linkPath, false)) {
			if (is_link($linkPath)) {
				$this->app->make('files')->delete($linkPath);
			}
			$this->app->make('files')->link($targetPath, $linkPath);
		}
	}

	/**
	 * Register helper.
	 *
     * @return void
	 */
	public function registerHelper()
	{
		$helperPath = plugin_path($this->pluginName, '$HELPER_PATH$');

		if (file_exists($helperPath)) {
			require_once $helperPath;
		}
	}

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path . '/plugins/' . $this->pluginNameLower)) {
                $paths[] = $path . '/plugins/' . $this->pluginNameLower;
            }
        }
        return $paths;
    }


	private function isRemovableSymlink(string $link, bool $force): bool
	{
		return is_link($link) && $force;
	}
}
